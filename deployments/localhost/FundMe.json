{
  "address": "0xc7eDF132912152cA20009Ccb406769616662e2A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        }
      ],
      "name": "getFunderToAmo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5cf1975210b20192a44b90912f6ad55024de7fc100915f1786227e95b7fbb8f1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc7eDF132912152cA20009Ccb406769616662e2A9",
    "transactionIndex": 0,
    "gasUsed": "564068",
    "logsBloom": "0x
    "blockHash": "0x329d001a79b9aa519c31894c6d68d7403bec39e260c717db42847d2fc3cc978c",
    "transactionHash": "0x5cf1975210b20192a44b90912f6ad55024de7fc100915f1786227e95b7fbb8f1",
    "logs": [],
    "blockNumber": 8287407,
    "cumulativeGasUsed": "564068",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE2B5Dd2C516860cB7e9a16dB6613578C142c1669"
  ],
  "numDeployments": 1,
  "solcInputHash": "c6bca96de89e33fc8cdc9652895a7315",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"getFunderToAmo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/fundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\n//imports from @chainlink npm package, interface instead of contract\\r\\n//interfaces complie down to ABI (application binary interface)\\r\\n//allows to interact with listed funcions in another contract\\r\\n// allows passing oracle contract address contract\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport \\\"./priceConverter.sol\\\";\\r\\n\\r\\n// custom revert errors stored outside contracts\\r\\n// takes less gas than require\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/* @title crowd funding\\r\\n * @author Farhan Absar\\r\\n * @notice fund me, good people\\r\\n * @dev does it work?\\r\\n */\\r\\n\\r\\ncontract FundMe {\\r\\n   // @dev makes 'PriceConverter' library functions methods of uint256\\r\\n   using PriceConverter for uint256;\\r\\n\\r\\n   // variables that will be constant after once set\\r\\n   // constants and immutables store directly in bytecode at deploy,\\r\\n   // rather than storage slot\\r\\n   // address public immutable owner prefixed with _i;\\r\\n   // so to not store in storage\\r\\n   address private i_owner;\\r\\n\\r\\n   // storage variables prefixed with s_\\r\\n   address[] private s_funders;\\r\\n\\r\\n   AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n   mapping(address => uint256) private s_funderToAmo;\\r\\n\\r\\n   //$2 seen raised to 10 ** 18\\r\\n   //6000000 gwei\\r\\n   // setting constants take less less gas\\r\\n   // constants are all-caps to not store in storage\\r\\n   uint256 public constant MINUSD = 2000000000000000000;\\r\\n\\r\\n   // like middleware\\r\\n   // only owner\\r\\n   modifier onlyOwner() {\\r\\n      if (msg.sender != i_owner) {\\r\\n         revert FundMe__NotOwner();\\r\\n      }\\r\\n      // custom error reverts stored outside contract\\r\\n      // takes less gas than require\\r\\n      // require(msg.sender == owner,'You are not the owner');\\r\\n\\r\\n      //runs the modified function /code after the require statement\\r\\n      _;\\r\\n   }\\r\\n\\r\\n   // 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n   // eth to usd pricefeed address from\\r\\n   // https://docs.chain.link/data-feeds/price-feeds/addresses/#Goerli%20Testnet\\r\\n   constructor(address _priceFeedAddress) {\\r\\n      //sets owner to whoever deploys the construct\\r\\n      i_owner = msg.sender;\\r\\n      s_priceFeed = AggregatorV3Interface(_priceFeedAddress);\\r\\n   }\\r\\n\\r\\n   // special functions: \\\"receive\\\"\\r\\n   // called when call data empty\\r\\n   receive() external payable {\\r\\n      fund();\\r\\n   }\\r\\n\\r\\n   // special functions: \\\"fallback\\\"\\r\\n   // called when no defined receive function when call data empty\\r\\n   // and when invalid call data method\\r\\n   fallback() external payable {\\r\\n      fund();\\r\\n   }\\r\\n\\r\\n   //'payable' keyword makes a function payable (red)\\r\\n   function fund() public payable {\\r\\n      //if statement can be replaced by shorter required statement\\r\\n      //if(msg.value < MINUSD){\\r\\n      //    revert?\\r\\n      //}\\r\\n\\r\\n      // any transaction before\\r\\n      require(\\r\\n         // valueInUSD(msg.value) >= MINUSD,\\r\\n         // first argument of library functions is same as caller\\r\\n         msg.value.valueInUSD(s_priceFeed) >= MINUSD,\\r\\n         // message if requirement is not met\\r\\n         \\\"More ETH required\\\"\\r\\n      );\\r\\n\\r\\n      s_funderToAmo[msg.sender] = msg.value;\\r\\n\\r\\n      s_funders.push(msg.sender);\\r\\n\\r\\n      // ETH -> USD\\r\\n   }\\r\\n\\r\\n   function wdraw() public onlyOwner {\\r\\n      //keyword 'this' refers to contract\\r\\n      //whose balance is transfered\\r\\n      //to sender /caller\\r\\n\\r\\n      // transfer automatically reverts if send fails\\r\\n      // payable(msg.sender).transfer(address(this).balance);\\r\\n\\r\\n      // call is powerful low lever function\\r\\n      // allows sending token without gas\\r\\n      // allows calling methods on contracts\\r\\n      // but also can modify properties on addresses\\r\\n      (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\r\\n         \\\"\\\"\\r\\n      );\\r\\n\\r\\n      // bool success = payable(msg.sender).send(address(this).balance);\\r\\n\\r\\n      require(success, \\\"Send failed\\\");\\r\\n\\r\\n      // optimized memory variable\\r\\n      address[] memory funders = s_funders;\\r\\n\\r\\n      for (uint256 funderInd = 0; funderInd < funders.length; funderInd++) {\\r\\n         address funder = funders[funderInd];\\r\\n         s_funderToAmo[funder] = 0;\\r\\n      }\\r\\n\\r\\n      // makes funders array blank\\r\\n      s_funders = new address[](0);\\r\\n   }\\r\\n\\r\\n   function getOwner() public view returns (address) {\\r\\n      return i_owner;\\r\\n   }\\r\\n\\r\\n   function getFunders(uint256 idx) public view returns (address) {\\r\\n      return s_funders[idx];\\r\\n   }\\r\\n\\r\\n   function getFunderToAmo(address _funder) public view returns (uint256) {\\r\\n      return s_funderToAmo[_funder];\\r\\n   }\\r\\n\\r\\n   function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n      return s_priceFeed;\\r\\n   }\\r\\n\\r\\n   function changeOwner(address _newOwner) public onlyOwner {\\r\\n      i_owner = _newOwner;\\r\\n   }\\r\\n\\r\\n   // function getVer() public view returns (uint256){\\r\\n   //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\r\\n   //     return priceFeed.version();\\r\\n   // }\\r\\n\\r\\n   // function ethToUSD() public view returns(uint256) {\\r\\n   //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\r\\n\\r\\n   //     //commas without variable in tuple to ignore variables\\r\\n   //     (,int256 answer,,,) = priceFeed.latestRoundData();\\r\\n\\r\\n   //     return uint256(answer);\\r\\n   // }\\r\\n\\r\\n   // function valueInUSD(uint256 _ethAmo) public view returns (uint256){\\r\\n   //     uint256 ethPrice = ethToUSD();\\r\\n   //     uint256 ethInUsd = (ethPrice * _ethAmo) /100000000;\\r\\n   //     return ethInUsd;\\r\\n   // }\\r\\n}\\r\\n\",\"keccak256\":\"0x85d47f3cc50d9bfd28e535ad1ec515b8882ea647ad2a38a37cb1d8d76621c0fa\",\"license\":\"MIT\"},\"contracts/priceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// ABI interface of the oracle contract\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// libraries are unpayable contracts without state variables\\n// they can be turned into methods for objects, classes, datatypes\\nlibrary PriceConverter {\\n  // uses chainlink oracle contract aggregator\\n  // takes address of contract as argument\\n  function ethToUSD(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    // returns in eth rate * 10^8\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    \\n    // typecast int to uint\\n    // ETH/USD 10^8, \\n    // into 10^10 to get 18 digits gwei\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  // first argument of library function is same as caller\\n  function valueInUSD(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = ethToUSD(priceFeed);\\n    \\n    // divide by 10^18 to get usd\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\",\"keccak256\":\"0x9750eb7f81c79353a0d35758061b34ba5716d6f5944e7065a65e893c73a311ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161093238038061093283398101604081905261002f91610097565b60008054336001600160a01b031991821617909155600280549091166001600160a01b03929092169190911790556100c0565b60006001600160a01b0382165b92915050565b61007e81610062565b811461008957600080fd5b50565b805161006f81610075565b6000602082840312156100ac576100ac600080fd5b60006100b8848461008c565b949350505050565b610863806100cf6000396000f3fe60806040526004361061007f5760003560e01c8063a6f9dae11161004e578063a6f9dae114610139578063b60d42881461008e578063bcc57b0d14610159578063ccadfaf21461018f5761008e565b80633a7b6c74146100965780634dc93616146100cc578063893d20e8146100f55780639e87a5cd146101135761008e565b3661008e5761008c6101a4565b005b61008c6101a4565b3480156100a257600080fd5b506100b66100b136600461058b565b61023e565b6040516100c391906105d4565b60405180910390f35b3480156100d857600080fd5b506100e8671bc16d674ec8000081565b6040516100c391906105e8565b34801561010157600080fd5b506000546001600160a01b03166100b6565b34801561011f57600080fd5b506002546001600160a01b03166040516100c39190610615565b34801561014557600080fd5b5061008c610154366004610637565b61026e565b34801561016557600080fd5b506100e8610174366004610637565b6001600160a01b031660009081526003602052604090205490565b34801561019b57600080fd5b5061008c6102bb565b600254671bc16d674ec80000906101c59034906001600160a01b031661043b565b10156101ec5760405162461bcd60e51b81526004016101e390610683565b60405180910390fd5b33600081815260036020526040812034905560018054808201825591527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319169091179055565b60006001828154811061025357610253610693565b6000918252602090912001546001600160a01b031692915050565b6000546001600160a01b031633146102995760405163579610db60e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102e65760405163579610db60e01b815260040160405180910390fd5b6000336001600160a01b0316476040516102ff906106a9565b60006040518083038185875af1925050503d806000811461033c576040519150601f19603f3d011682016040523d82523d6000602084013e610341565b606091505b50509050806103625760405162461bcd60e51b81526004016101e3906106d3565b600060018054806020026020016040519081016040528092919081815260200182805480156103ba57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161039c575b5050505050905060005b81518110156104185760008282815181106103e1576103e1610693565b6020908102919091018101516001600160a01b03166000908152600390915260408120555080610410816106f9565b9150506103c4565b506040805160008152602081019182905251610436916001916104f6565b505050565b60008061044783610473565b90506000670de0b6b3a764000061045e8684610713565b6104689190610748565b925050505b92915050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190610784565b505050915050806402540be4006104ef91906107fc565b9392505050565b82805482825590600052602060002090810192821561054b579160200282015b8281111561054b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610516565b5061055792915061055b565b5090565b5b80821115610557576000815560010161055c565b805b811461057d57600080fd5b50565b803561046d81610570565b6000602082840312156105a0576105a0600080fd5b60006105ac8484610580565b949350505050565b60006001600160a01b03821661046d565b6105ce816105b4565b82525050565b6020810161046d82846105c5565b806105ce565b6020810161046d82846105e2565b600061046d826105b4565b600061046d826105f6565b6105ce81610601565b6020810161046d828461060c565b610572816105b4565b803561046d81610623565b60006020828403121561064c5761064c600080fd5b60006105ac848461062c565b6011815260006020820170135bdc9948115512081c995c5d5a5c9959607a1b815291505b5060200190565b6020808252810161046d81610658565b634e487b7160e01b600052603260045260246000fd5b60008161046d565b600b81526000602082016a14d95b990819985a5b195960aa1b8152915061067c565b6020808252810161046d816106b1565b634e487b7160e01b600052601160045260246000fd5b6000600019820361070c5761070c6106e3565b5060010190565b81810280821583820485141761072b5761072b6106e3565b5092915050565b634e487b7160e01b600052601260045260246000fd5b60008261075757610757610732565b500490565b69ffffffffffffffffffff8116610572565b805161046d8161075c565b805161046d81610570565b600080600080600060a0868803121561079f5761079f600080fd5b60006107ab888861076e565b95505060206107bc88828901610779565b94505060406107cd88828901610779565b93505060606107de88828901610779565b92505060806107ef8882890161076e565b9150509295509295909350565b8181028060008312600160ff1b85141615610819576108196106e3565b828205841483151761072b5761072b6106e356fea264697066735822122065516c913f98eafd845e23195831e7d2761154cdbab3973e15dcd7431c15611b64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063a6f9dae11161004e578063a6f9dae114610139578063b60d42881461008e578063bcc57b0d14610159578063ccadfaf21461018f5761008e565b80633a7b6c74146100965780634dc93616146100cc578063893d20e8146100f55780639e87a5cd146101135761008e565b3661008e5761008c6101a4565b005b61008c6101a4565b3480156100a257600080fd5b506100b66100b136600461058b565b61023e565b6040516100c391906105d4565b60405180910390f35b3480156100d857600080fd5b506100e8671bc16d674ec8000081565b6040516100c391906105e8565b34801561010157600080fd5b506000546001600160a01b03166100b6565b34801561011f57600080fd5b506002546001600160a01b03166040516100c39190610615565b34801561014557600080fd5b5061008c610154366004610637565b61026e565b34801561016557600080fd5b506100e8610174366004610637565b6001600160a01b031660009081526003602052604090205490565b34801561019b57600080fd5b5061008c6102bb565b600254671bc16d674ec80000906101c59034906001600160a01b031661043b565b10156101ec5760405162461bcd60e51b81526004016101e390610683565b60405180910390fd5b33600081815260036020526040812034905560018054808201825591527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319169091179055565b60006001828154811061025357610253610693565b6000918252602090912001546001600160a01b031692915050565b6000546001600160a01b031633146102995760405163579610db60e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102e65760405163579610db60e01b815260040160405180910390fd5b6000336001600160a01b0316476040516102ff906106a9565b60006040518083038185875af1925050503d806000811461033c576040519150601f19603f3d011682016040523d82523d6000602084013e610341565b606091505b50509050806103625760405162461bcd60e51b81526004016101e3906106d3565b600060018054806020026020016040519081016040528092919081815260200182805480156103ba57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161039c575b5050505050905060005b81518110156104185760008282815181106103e1576103e1610693565b6020908102919091018101516001600160a01b03166000908152600390915260408120555080610410816106f9565b9150506103c4565b506040805160008152602081019182905251610436916001916104f6565b505050565b60008061044783610473565b90506000670de0b6b3a764000061045e8684610713565b6104689190610748565b925050505b92915050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190610784565b505050915050806402540be4006104ef91906107fc565b9392505050565b82805482825590600052602060002090810192821561054b579160200282015b8281111561054b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610516565b5061055792915061055b565b5090565b5b80821115610557576000815560010161055c565b805b811461057d57600080fd5b50565b803561046d81610570565b6000602082840312156105a0576105a0600080fd5b60006105ac8484610580565b949350505050565b60006001600160a01b03821661046d565b6105ce816105b4565b82525050565b6020810161046d82846105c5565b806105ce565b6020810161046d82846105e2565b600061046d826105b4565b600061046d826105f6565b6105ce81610601565b6020810161046d828461060c565b610572816105b4565b803561046d81610623565b60006020828403121561064c5761064c600080fd5b60006105ac848461062c565b6011815260006020820170135bdc9948115512081c995c5d5a5c9959607a1b815291505b5060200190565b6020808252810161046d81610658565b634e487b7160e01b600052603260045260246000fd5b60008161046d565b600b81526000602082016a14d95b990819985a5b195960aa1b8152915061067c565b6020808252810161046d816106b1565b634e487b7160e01b600052601160045260246000fd5b6000600019820361070c5761070c6106e3565b5060010190565b81810280821583820485141761072b5761072b6106e3565b5092915050565b634e487b7160e01b600052601260045260246000fd5b60008261075757610757610732565b500490565b69ffffffffffffffffffff8116610572565b805161046d8161075c565b805161046d81610570565b600080600080600060a0868803121561079f5761079f600080fd5b60006107ab888861076e565b95505060206107bc88828901610779565b94505060406107cd88828901610779565b93505060606107de88828901610779565b92505060806107ef8882890161076e565b9150509295509295909350565b8181028060008312600160ff1b85141615610819576108196106e3565b828205841483151761072b5761072b6106e356fea264697066735822122065516c913f98eafd845e23195831e7d2761154cdbab3973e15dcd7431c15611b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/fundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 59,
        "contract": "contracts/fundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 62,
        "contract": "contracts/fundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 66,
        "contract": "contracts/fundMe.sol:FundMe",
        "label": "s_funderToAmo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}